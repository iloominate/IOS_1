#!/bin/dash

POSIXLY_CORRECT=yes
if command -v realpath >/dev/null 2>&1 ; then
  nothing_var=""
else
  echo "NO realpath error"
  exit 1
fi

LIST=""
SECRETLOG=""

DIRECTORY="$PWD"
TIME=$(date +%Y-%m-%d_%H:%M:%S)
FILE=""

usage=""
group=""
mode=""
before=""
after=""
search=""

DEAFAULT_AFTER_DATE="1970-00-01_00:00:00"
DEAFAULT_BEFORE_DATE="9999-12-28_00:00:00"

openFile() {
  if [ -e "$EDITOR" ]; then 
    $EDITOR "$FILE"
  elif [ -e "$VISUAL" ]; then 
    $VISUAL "$FILE"
  else
    vi "$FILE"
  fi
}

searchAndModifyConfig () 
{
  FILE=$(realpath "$FILE")
  search=$(awk -v file="$FILE" '$1 == file {print "not zero"}' "$MOLE_RC")

  if [ -z "$search" ]; then 
    echo "$FILE $TIME 1 $group" >> $MOLE_RC

  else
    REPLACE_DATE=""
    REPLACE_COUNT=""
    REPLACE_GROUP=""

    REPLACE_DATE=$(awk -v GROUP="$group" -v FILE="$FILE" -v DATE="$TIME" '
    $1 == FILE {  
      DATE = $2 "," DATE
      print DATE
    }
    ' $MOLE_RC)

    REPLACE_COUNT=$(awk -v GROUP="$group" -v FILE="$FILE" -v DATE="$TIME" '
    $1 == FILE {  
      COUNT = $3 + 1
      print COUNT
    }
    ' $MOLE_RC)

    if [ $group = "" ]; then 
      REPLACE_GROUP="-"
    fi

    REPLACE_GROUP=$(awk -v GROUP="$group" -v FILE="$FILE" -v DATE="$TIME" '
    $1 == FILE {  
      if ($4 !~ GROUP) {
        if ($4 == "-"){
          GROUP=GROUP
        }
        else if (GROUP == "-"){
          GROUP=$4
        }
        else{
          GROUP= $4 "," GROUP
        }
      } else 
      {
        GROUP=$4
      }
      print GROUP
    }
    ' $MOLE_RC)


    sed -i "/^$(echo "$FILE" | sed 's/\//\\\//g')/s/\(\S\+\s\+\)\S\+/\1$REPLACE_DATE/" $MOLE_RC
    sed -i "/^$(echo "$FILE" | sed 's/\//\\\//g')/s/\(\S\+\s\+\)\(\S\+\s\+\)\(\S\+\)/\1\2$REPLACE_COUNT/" $MOLE_RC
    sed -i "/^$(echo "$FILE" | sed 's/\//\\\//g')/s/\(\S\+\s\+\S\+\s\+\S\+\s\+\)\(\S\+\)/\1$REPLACE_GROUP/" $MOLE_RC

  fi
}

secretLog ()
{
  if [ ! -d "/home/$USER/.mole/" ]; then
    mkdir -p "/home/$USER/.mole/"
  fi

  dateForLog=$(date +%Y-%m-%d_%H-%M-%S)
  
  directoryForLog=$@

  while IFS= read -r line; do
    filePath=$(echo "$line" | awk '{print $1}') 
    fileBaseName=$(basename $filePath)
    currentFileLength=${#fileBaseName}
    datestr=$(echo $line | awk '{print $2}')

    outputDate=""

    if [ $# -gt 0 ]; then 
      for dir in "$@"
      do
        if [ ! -d "$dir" ]; then
          echo "Wrong secret-log arg"
          exit 1
        fi

        if [ -n $(find "$dir" -maxdepth 1 -type f -name "$(basename "$filePath")") ]  &&  [ "$filePath" != "$dir"/*/* ]; then
          outputDate=$(echo $datestr | awk -F',' -v after=$after -v before=$before '{
            check=0 
            for (i=1; i <= NF; i++) {
              if ($i > after &&  $i < before) {
                if (check) {printf ";"}
                printf $i
                check=1
              } 
            }
          }')

          if [ "$outputDate" != "" ]; then 
            echo "$fileBaseName;$outputDate" | sed 's/:/-/g' | bzip2 -c >>/home/"$USER"/.mole/log_"$USER"_"$dateForLog".bz2
          fi
        fi
      done
    else
      outputDate=$(echo $datestr | awk -F',' -v after=$after -v before=$before '{
        check=0 
        for (i=1; i <= NF; i++) {
          if ($i > after &&  $i < before) {
            if (check) {printf ";"}
            printf $i
            check=1
          } 
        }
      }')

      if [ "$outputDate" != "" ]; then 
        echo "$fileBaseName;$outputDate" | sed 's/:/-/g' | bzip2 -c >>/home/"$USER"/.mole/log_"$USER"_"$dateForLog".bz2
      fi
    fi
  done < "$MOLE_RC" | sort

} 

listPrint ()
{
  maxFileLength=0

  while IFS= read -r line; do
    filePath=$(echo "$line" | awk '{print $1}') 
    fileBaseName=$(basename $filePath)
    currentFileLength=${#fileBaseName}

    datestr=$(echo $line | awk '{print $2}')

    currentMostRecentDate=$(echo $datestr | awk -F',' '{print $NF}')
    currentLatestDate=$(echo $datestr | awk -F',' '{print $1}')

    if [ -e "$DIRECTORY/$(basename "$filePath")" -a "$filePath" != "$DIRECTORY"/*/* ]; then
      if [ "$currentMostRecentDate" '>' "$after" -a "$currentLatestDate" '<' "$before" ]; then
        if [ $currentFileLength -gt $maxFileLength ]; then 
          maxFileLength=$currentFileLength
        fi       
      fi  
    fi
  done < "$MOLE_RC"


  while IFS= read -r line; do
    filePath=$(echo "$line" | awk '{print $1}') 
    fileBaseName=$(basename $filePath)
    currentFileLength=${#fileBaseName}


    datestr=$(echo $line | awk '{print $2}')

    currentMostRecentDate=$(echo $datestr | awk -F',' '{print $NF}')
    currentLatestDate=$(echo $datestr | awk -F',' '{print $1}')

    if [ -e "$DIRECTORY/$(basename "$filePath")" -a "$filePath" != "$DIRECTORY"/*/* ]; then
      if [ "$currentMostRecentDate" '>' "$after" -a "$currentLatestDate" '<' "$before" ]; then
        fileName=$(basename "$filePath")
        groups=$(echo "$line" | awk '{print $NF}')
        awk -v file_name="$fileName" -v groups="$groups" -v max_length="$maxFileLength" 'BEGIN { printf("%-*s %s\n", max_length, file_name, groups); }'
      fi      
    fi
  done < "$MOLE_RC" | sort
}

directoryPrint ()
{
  while read line
    do
      filePath=$(echo $line | awk '{print $1}')
      datestr=$(echo $line | awk '{print $2}')

      currentMostRecentDate=$(echo $datestr | awk -F',' '{print $NF}')
      currentLatestDate=$(echo $datestr | awk -F',' '{print $1}')

      if [ -e "$DIRECTORY/$(basename "$filePath")" -a "$filePath" != "$DIRECTORY"/*/* ]; then
        if [ "$currentMostRecentDate" '>' "$after" -a "$currentLatestDate" '<' "$before" ]; then 
          if [ "$mostRecentDate" = "" -o "$currentMostRecentDate" '>' "$mostRecentDate" ]; then
            mostRecentDate="$currentMostRecentDate"
            FILE=$(echo $line | awk '{print $1}')
          fi
        fi
      fi 

  done < "$MOLE_RC"

  if  [ -f "$FILE" ]; then
    openFile
    searchAndModifyConfig
  else
    echo "No suitable file in this direcory "
    exit 1
  fi
}

directoryPrintMode ()
{
  maxCount=0
  while read line
    do

      filePath=$(echo $line | awk '{print $1}')
      datestr=$(echo $line | awk '{print $2}')
      currentCount=$(echo $line | awk '{print $3}')

      currentMostRecentDate=$(echo $datestr | awk -F',' '{print $NF}')
      currentLatestDate=$(echo $datestr | awk -F',' '{print $1}')

      if [ -e "$DIRECTORY/$(basename "$filePath")" -a "$filePath" != "$DIRECTORY"/*/* ]; then
        if [ "$currentMostRecentDate" '>' "$after" -a "$currentLatestDate" '<' "$before" ]; then
          if [ "$maxCount" '<' "$currentCount" ]; then
            maxCount=$currentCount
            FILE=$(echo $line | awk '{print $1}')
          fi
        fi
      fi
  done < "$MOLE_RC"

  if  [ -f "$FILE" ]; then
    openFile
    searchAndModifyConfig
  else
    echo "No suitable file in this direcory "
    exit 1
  fi
}

if [ -z "$MOLE_RC" ]; then
  echo "Configuration error, MOLE_RC is null"
  exit 1
fi

if [ ! -d "$(dirname "$MOLE_RC")" ]; then
  mkdir -p "$(dirname "$MOLE_RC")"
fi

if [ ! -e "$MOLE_RC" ]; then 
  touch "$MOLE_RC"
fi



usage() {
  echo "mole [-g GROUP] FILE" 1>&2
  echo "mole [-m] [FILTERS] [DIRECTORY]" 1>&2
  echo "mole list [FILTERS] [DIRECTORY]" 1>&2
  exit 1;
}

if [ $1 = "list" ]; then
  LIST=true
  shift 1
elif [ $1 = "secret-log" ]; then
  SECRETLOG=true
  shift 1
fi

while getopts ":g:b:a:mh" opt; do
  case ${opt} in
    h ) usage;;
    g ) group="$OPTARG";;
    m ) mode="true";;
    b ) before="$OPTARG";;
    a ) after="$OPTARG";;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2;;
    : ) 
      echo "Option -$OPTARG requires an argument." 1>&2; usage;;
  esac
done
shift $((OPTIND -1))

if [ -z $group ]; then 
  group="-"
fi

time_fix="23:59:59"
if [ -z $before ]; then
  before="$DEAFAULT_BEFORE_DATE"
else 
  before="$before"_"$time_fix"
fi

if [ -z $after ]; then 
  after="$DEAFAULT_AFTER_DATE"
else 
  after="$after"_"$time_fix"
fi


# Set DIRECTORY and FILE value
if [ ! $SECRETLOG ]; then 
  if [ $# -gt 0 ]; then
    if [ -d "$1" -a $# -lt 2 ]; then
      DIRECTORY="$1"
    elif [ -f "$1" ]; then
      FILE="$1"
      if [ -d "$2" -a  -n "$2" ]; then 
        DIRECTORY="$2"
      elif [ "$2" = "" ]; then 
        DIRECTORY="$PWD"
      else 
        echo "Invalid argument or file is not in this directory: 1 $2 1" 1>&2
        exit 1
      fi
    else 
      echo "Invalid argument or file is not in this directory: $1" 1>&2
      exit 1
    fi
  fi
fi

# Check if work with DIRECTORY or with FILE
if [ $SECRETLOG ]; then 
  secretLog $@
elif [ -e  "$FILE" ]; then 
  openFile
  searchAndModifyConfig
elif [ "$LIST" = true ]; then 
  listPrint
else
  if [ "$mode" = true ]; then 
    directoryPrintMode
  else
    directoryPrint
  fi
fi
