POSIXLY_CORRECT=yes
#!/bin/bash

LIST=""
SECRETLOG=""

DIRECTORY="$PWD"
TIME=$(date +%Y-%m-%d_%H:%M:%S)
FILE=""

usage=""
group=""
mode=""
before=""
after=""
search=""

DEAFAULT_AFTER_DATE="1970-00-01_00:00:00"
DEAFAULT_BEFORE_DATE="9999-12-28_00:00:00"

function openFile ()
{
  echo "I'M IN OPENFILE FUNC"
  if [[ -e "$EDITOR" ]]; then 
    $EDITOR "$FILE"
  elif [[ -e "$VISUAL" ]]; then 
    $VISUAL "$FILE"
  else
    vi "$FILE"
  fi
}

function searchAndModifyConfig () 
{
  echo "I'm un searchAndModifyConfig function"
  FILE=$(realpath "$FILE")
  search=$(awk -v file="$FILE" '$1 == file {print "not zero"}' "$MOLE_RC")

  if [[ -z "$search" ]]; then 
    echo "$FILE $TIME 1 $group" >> $MOLE_RC
  else
    awk -i inplace -v GROUP="$group" -v FILE="$FILE" -v DATE="$TIME" '
    BEGIN {}
    $1 == FILE {  
      $3 += 1
      $2 = DATE
      if ($4 !~ GROUP) {
        if ($4 == "-") {
          $4 = GROUP
        } else if (GROUP != "-") {
          $4 = $4 "," GROUP
        }
      }
    }
    {print}
    END {}
    ' $MOLE_RC
  fi
}


function dateToSeconds () 
{
  # Parse the date string into its components
  year=$(echo "$1" | cut -d'-' -f1)
  month=$(echo "$1" | cut -d'-' -f2)
  day=$(echo "$1" | cut -d'-' -f3 | cut -d'_' -f1)
  hour=$(echo "$1" | cut -d'-' -f3 | cut -d'_' -f2)
  minute=$(echo "$1" | cut -d'-' -f4)
  second=$(echo "$1" | cut -d'-' -f5)

  # Convert the components to seconds since the epoch (Jan 1 1970 00:00:00 UTC)
  seconds=$(date -d "${year}-${month}-${day} ${hour}:${minute}:${second}" +%s)

  # Return the number of seconds
  echo "$seconds"
}

if [[ -z "$MOLE_RC" ]]; then
  echo "Configuration error, MOLE_RC is null"
  exit 1;
fi

if [ ! -d "$(dirname "$MOLE_RC")" ]; then
  mkdir -p "$(dirname "$MOLE_RC")"
fi

if [ ! -e "$MOLE_RC" ]; then 
  touch "$MOLE_RC"
fi



usage() {
  echo "Usage: $0 [-h] [-g GROUP] [-m] [-b DATE] [-a DATE] [FILTERS] [DIRECTORY]" 1>&2
}

if [[ $1 == "list" ]]; then
  LIST=true
  shift 1
elif [[ $1 == "secret-log" ]]; then
  SECRETLOG=true
  shift 1
fi

while getopts ":g:b:a:mh" opt; do
  case ${opt} in
    h ) usage;;
    g ) group="$OPTARG";;
    m ) mode="true";;
    b ) before="$OPTARG";;
    a ) after="$OPTARG";;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2;;
    : ) 
      echo "Option -$OPTARG requires an argument." 1>&2; usage;;
  esac
done
shift $((OPTIND -1))

if [[ -z $group ]]; then 
  group="-"
fi

if [[ -z $before ]]; then
  before="$DEAFAULT_BEFORE_DATE"
fi

if [[ -z $after ]]; then 
  after="$DEAFAULT_AFTER_DATE"
fi

# Set DIRECTORY and FILE value 
if [[ $# -gt 0 ]]; then
  if [ -d "$1" ]; then
    DIRECTORY="$1"
  elif [ -f "$1" ]; then
    FILE="$1"
  else 
    echo "Invalid argument or file is not in this directory: $1" 1>&2
  fi
fi


# Check if work with DIRECTORY or with FILE 
if [[ -e  "$FILE" ]]; then 
  openFile
  searchAndModifyConfig
  else
   if [[ $mode == true ]]; then 
    echo "$mode"
   else
    echo "I'm in else DIRECTORY"
    FILE=$(awk -v dateA="$after" -v dateB="$before" -v directory="$DIRECTORY" '
    BEGIN {
      mostRecentDate = dateA
    }
    $2 >= mostRecentDate {
      mostRecentDate = $2
      FILE = $1
    }
    END {
      print FILE
    }
    ' "$MOLE_RC")
    echo "$FILE"
    if  [ -f "$FILE" ]; then
      openFile
      searchAndModifyConfig
    else
      echo "Not suitable file in this direcory "
      exit
    fi
  fi
fi

# FNR>1 && dateA<=$2 && dateB>=$2 {
    #   if ($2 >= mostRecentDate) {
    #     mostRecentDate=$2
    #     FILE=$1
    #   }
    #}


# echo "FILE: $FILE"
# echo "Directory: $DIRECTORY"
# echo "a- $after"
# echo "b- $before"
# echo "Secret log: $SECRETLOG"
# echo "LIST: $LIST"