POSIXLY_CORRECT=yes
#!/bin/bash

LIST=""
SECRETLOG=""

DIRECTORY="$PWD"
TIME=$(date +%Y-%m-%d_%H:%M:%S)
FILE=""

usage=""
group=""
mode=""
before=""
after=""
search=""

DEAFAULT_AFTER_DATE="1970-00-01_00:00:00"
DEAFAULT_BEFORE_DATE="9999-12-28_00:00:00"

function openFile ()
{
  if [[ -e "$EDITOR" ]]; then 
    $EDITOR "$FILE"
  elif [[ -e "$VISUAL" ]]; then 
    $VISUAL "$FILE"
  else
    vi "$FILE"
  fi
}

function searchAndModifyConfig () 
{
  FILE=$(realpath "$FILE")
  search=$(awk -v file="$FILE" '$1 == file {print "not zero"}' "$MOLE_RC")

  if [[ -z "$search" ]]; then 
    echo "$FILE $TIME 1 $group" >> $MOLE_RC
  else
    awk -i inplace -v GROUP="$group" -v FILE="$FILE" -v DATE="$TIME" '
    BEGIN {}
    $1 == FILE {  
      $3 += 1
      $2 = DATE "," $2
      if ($4 !~ GROUP) {
        if ($4 == "-") {
          $4 = GROUP
        } else if (GROUP != "-") {
          $4 = $4 "," GROUP
        }
      }
    }
    {print}
    END {}
    ' $MOLE_RC
  fi
}


function dateToSeconds () 
{
  # Parse the date string into its components
  year=$(echo "$1" | cut -d'-' -f1)
  month=$(echo "$1" | cut -d'-' -f2)
  day=$(echo "$1" | cut -d'-' -f3 | cut -d'_' -f1)
  hour=$(echo "$1" | cut -d'-' -f3 | cut -d'_' -f2)
  minute=$(echo "$1" | cut -d'-' -f4)
  second=$(echo "$1" | cut -d'-' -f5)

  # Convert the components to seconds since the epoch (Jan 1 1970 00:00:00 UTC)
  seconds=$(date -d "${year}-${month}-${day} ${hour}:${minute}:${second}" +%s)

  # Return the number of seconds
  echo "$seconds"
}

function listPrint ()
{
  while IFS= read -r line; do
    filePath=$(echo "$line" | awk '{print $1}') 
    local datestr=$(echo $line | awk '{print $2}')

    local currentMostRecentDate=$(echo $date | awk F',' '{print $1}')
    local currentLatestDate=$(echo $date | awk F',' '{print $NF}')

    if [[ $(find "$DIRECTORY" -maxdepth 1 -type f -name "$(basename "$filePath")") && "$filePath" != "$DIRECTORY"/*/* ]]; then

      if [[ "$currentMostRecentDate" > "$after" && "$currentLatestDate" < "$before" ]]; then
        file_name=$(basename "$filePath")

        groups=$(echo "$line" | awk '{print $NF}')

        echo "$file_name $groups"
      fi
      
    fi
  done < "$MOLE_RC"
}

function directoryPrint ()
{
  echo "I'm in directoryPrint function"
  while read line
    do
      local filePath=$(echo $line | awk '{print $1}')
      local datestr=$(echo $line | awk '{print $2}')

      local currentMostRecentDate=$(echo $datestr | awk -F',' '{print $1}')
      local currentLatestDate=$(echo $datestr | awk -F',' '{print $NF}')

      if [[ $(find "$DIRECTORY" -maxdepth 1 -type f -name "$(basename "$filePath")") && "$filePath" != "$DIRECTORY"/*/* ]]; then
        if [[ "$currentMostRecentDate" > "$after" && "$currentLatestDate" < "$before" ]]; then 
          if [[ "$mostRecentDate" == "" || "$currentMostRecentDate" > "$mostRecentDate" ]]; then
            mostRecentDate="$currentMostRecentDate"
            FILE=$(echo $line | awk '{print $1}')
          fi
        fi
      fi 

  done < "$MOLE_RC"

  if  [ -f "$FILE" ]; then
    openFile
    searchAndModifyConfig
  else
    echo "No suitable file in this direcory "
    exit 1
  fi
}

function directoryPrintMode ()
{
  echo "I'm in directoryPrintMode function"
  maxCount=0
  while read line
    do

      local filePath=$(echo $line | awk '{print $1}')
      local datestr=$(echo $line | awk '{print $2}')
      local currentCount=$(echo $line | awk '{print $3}')

      local currentMostRecentDate=$(echo $datestr | awk -F',' '{print $1}')
      local currentLatestDate=$(echo $datestr | awk -F',' '{print $NF}')

      if [[ $(find "$DIRECTORY" -maxdepth 1 -type f -name "$(basename "$filePath")") && "$filePath" != "$DIRECTORY"/*/* ]]; then
        if [[ "$currentMostRecentDate" > "$after" && "$currentLatestDate" < "$before" ]]; then
          echo "$maxCount vs $currentCount"
          if [[ "$maxCount" < "$currentCount" ]]; then
            maxCount=$currentCount
            echo "after change: max count = $maxCount current count = $currentCount"
            FILE=$(echo $line | awk '{print $1}')
          fi
        fi 
      fi
  done < "$MOLE_RC"

  if  [ -f "$FILE" ]; then
    openFile
    searchAndModifyConfig
  else
    echo "No suitable file in this direcory "
    exit 1
  fi
}

if [[ -z "$MOLE_RC" ]]; then
  echo "Configuration error, MOLE_RC is null"
  exit 1
fi

if [ ! -d "$(dirname "$MOLE_RC")" ]; then
  mkdir -p "$(dirname "$MOLE_RC")"
fi

if [ ! -e "$MOLE_RC" ]; then 
  touch "$MOLE_RC"
fi



usage() {
  echo "Usage: $0 [-h] [-g GROUP] [-m] [-b DATE] [-a DATE] [FILTERS] [DIRECTORY]" 1>&2
}

if [[ $1 == "list" ]]; then
  LIST=true
  shift 1
elif [[ $1 == "secret-log" ]]; then
  SECRETLOG=true
  shift 1
fi

while getopts ":g:b:a:mh" opt; do
  case ${opt} in
    h ) usage;;
    g ) group="$OPTARG";;
    m ) mode="true";;
    b ) before="$OPTARG";;
    a ) after="$OPTARG";;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2;;
    : ) 
      echo "Option -$OPTARG requires an argument." 1>&2; usage;;
  esac
done
shift $((OPTIND -1))

if [[ -z $group ]]; then 
  group="-"
fi

if [[ -z $before ]]; then
  before="$DEAFAULT_BEFORE_DATE"
fi

if [[ -z $after ]]; then 
  after="$DEAFAULT_AFTER_DATE"
fi

# Set DIRECTORY and FILE value 
if [[ $# -gt 0 ]]; then
  if [ -d "$1" ]; then
    DIRECTORY="$1"
  elif [ -f "$1" ]; then
    FILE="$1"
    if [ -d "$2" ] && [ -n "$2" ]; then 
      DIRECTORY="$2"
    elif [ "$2" == "" ]; then 
      DIRECTORY="$PWD"
    else 
      echo "Invalid argument or file is not in this directory: 1 $2 1" 1>&2
    fi
  else 
    echo "Invalid argument or file is not in this directory: $1" 1>&2
  fi
fi


# Check if work with DIRECTORY or with FILE 
if [[ -e  "$FILE" ]]; then 
  openFile
  searchAndModifyConfig
elif [[ "$LIST" == true ]]; then 
  listPrint
else
  if [[ $mode == true ]]; then 
    directoryPrintMode
  else
    directoryPrint
  fi
fi


# echo "FILE: $FILE"
# echo "Directory: $DIRECTORY"
# echo "a- $after"
# echo "b- $before"
# echo "Secret log: $SECRETLOG"
# echo "LIST: $LIST"